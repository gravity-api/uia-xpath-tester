name: UiaXpathTester.$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'any cpu'
  buildConfiguration: 'Release'

stages:
  - stage: 'Build'
    jobs:
    - job: 'BuildAndPublish'
      displayName: 'Build, Pack & Publish'
      steps:
      - task: NuGetToolInstaller@1
        displayName: 'Install NuGet Tools'

      - task: NuGetCommand@2
        displayName: 'Restore Packages'
        inputs:
          restoreSolution: '$(solution)'

      - task: VSBuild@1
        displayName: 'Build Solution'
        inputs:
          solution: '$(solution)'
          msbuildArgs: '/target:publish /p:Configuration=Release /p:DeployOnBuild=true /p:PublishDir=$(Build.BinariesDirectory)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          clean: true

      - task: ArchiveFiles@2
        displayName: 'Create Build Artifact'
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)/*.*'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber)-win-x64.zip'
          replaceExistingArchive: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Build Artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

  - stage: 'PublishGit'
    dependsOn: 'Build'
    condition: succeeded()
    jobs:
    - job: 'CraeteRelease'
      displayName: 'Create a GitHub Release & Tag'
      steps:
      - checkout: none

      - task: PowerShell@2
        displayName: 'Parse Build Version for GitHub Tag'
        inputs:
          targetType: 'inline'
          script: |
            # setup
            [regex]$pattern = '(\d+.?)+'
            $version        = $pattern.Matches('$(Build.BuildNumber)') | foreach-object {$_.Value}
            # set value
            Write-Host "##vso[task.setvariable variable=buildVersion]$version"

      - task: DownloadBuildArtifacts@1
        displayName: 'Download Build Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'specific'
          downloadPath: '$(System.ArtifactsDirectory)'
          cleanDestinationFolder: true

      - task: GitHubRelease@1
        displayName: 'Create GitHub Tag'
        inputs:
          assets: $(Build.ArtifactStagingDirectory)/drop/*
          gitHubConnection: 'github.com'
          repositoryName: '$(Build.Repository.Name)'
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: 'userSpecifiedTag'
          tag: 'v$(buildVersion)'
          title: 'Production v$(buildVersion)'
          releaseNotesSource: 'inline'
          changeLogCompareToRelease: 'lastFullRelease'
          changeLogType: 'commitBased'